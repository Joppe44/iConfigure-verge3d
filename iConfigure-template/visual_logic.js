/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Fri, 28 Jun 2024 07:27:59 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    

    return {
        
    };
};

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

var VARS = Object.defineProperties({}, {
    
});

// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage("loaded", \'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



function screenShot() {
    return (async function (before, after, waitingTime, waitingTimeBefore) {
                window.addEventListener("message", function (e) {
                    let response = JSON.parse(e.data);
                    if (response.action === "screenshot") {
                        before();
                        const win = window;
                        var canvas = document.querySelector("#v3d-container");
                            var p = JSON.parse(JSON.stringify(canvas.getBoundingClientRect()));
                        var src;
                        window.setTimeout(function () {
                            console.log("1: resizing");
                            // adding screenshot overlay
                            var overlay = win.document.createElement("img");
                            overlay.id = "overlay";
                            overlay.style =
                                "display: block; width: 100%; heigth: 100% z-index: 1000; position: absolute; top: 0; left: 0;";
                            overlay.src = appInstance.renderer.domElement.toDataURL("image/png");
                            document
                                .querySelector("#v3d-container")
                                .parentNode.appendChild(overlay);
                            var size = 630;
                            canvas.style.width = `${size}px`;
                            canvas.style.height = `${size}px`;
                            canvas.width = `${size}`;
                            canvas.height = `${size}`;
                            appInstance.renderer.setPixelRatio(1);
                            if (appInstance.postprocessing) {
                                appInstance.postprocessing.composer.setPixelRatio(1);
                            }
                            enableRendering();
                            appInstance.onResize();

                        }, waitingTimeBefore);

                        window.setTimeout(function () {
                            enableRendering();

                            console.log("2: taking screenshot");

                            src = appInstance.renderer.domElement.toDataURL("image/png");
                            window.parent.postMessage(
                                JSON.stringify({ action: "screenshot", data: src }),
                                "*"
                            );
                        }, waitingTimeBefore + 300);

                        window.setTimeout(function () {
                            console.log("3");

                            canvas.width = `${p.width}`;
                            canvas.height = `${p.height}`;
                            canvas.style.width = `${p.width}px`;
                            canvas.style.height = `${p.height}px`;

                            overlay.remove();
                            setScreenScale(window.devicePixelRatio);
                        }, waitingTimeBefore + 400);

                        window.setTimeout(function () {
                            console.log("4");

                            after();
                        }, waitingTime + waitingTimeBefore + 500);
                    }
                });
            }).apply(null, arguments);
}

function setScreenScale(factor) {

    // already have maximum pixel ratio in HiDPI mode
    if (!appInstance.useHiDPIRenderPass)
        appInstance.renderer.setPixelRatio(factor);

    if (appInstance.postprocessing)
        appInstance.postprocessing.composer.setPixelRatio(factor);

    // to update possible post-processing passes
    appInstance.onResize();
}

// disableRendering puzzle
function disableRendering(enableSSAA) {
    appInstance.ssaaOnPause = enableSSAA;
    appInstance.disableRendering(1);
}

// enableRendering puzzle
function enableRendering() {
    appInstance.enableRendering();
}

function update() {
    return (function (statements) {
            window.addEventListener("message", function (e) {
                if (e.data ===  'loaded'){return};
                let response = JSON.parse(e.data);

                if (response.action === "updateConfiguration") {
                window.changedFeature = response.updatedFeature;
                    window.selectedItems = response.configuration;
                    statements();
                }
            });
        }).apply(null, arguments);
}


screenShot( function() {},function() {},100,100);
setScreenScale(window.devicePixelRatio);
disableRendering(true);
enableRendering();

update( function() {});


} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
